/**
 * Wire Copyright (C) 2018 Wire Swiss GmbH
 *
 * <p>This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program. If
 * not, see <http://www.gnu.org/licenses/>.
 */
package com.waz.zclient.paintcode;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.RectF;

/**
 * Created by Wire Design Team on 26. Feb 2018. Copyright Â© 2018 Wire Swiss GmbH. All rights
 * reserved.
 *
 * <p>Generated by PaintCode http://www.paintcodeapp.com
 *
 * @author Wire Design Team
 */
public class WireStyleKit {

  // Resizing Behavior
  public enum ResizingBehavior {
    AspectFit, // !< The content is proportionally resized to fit into the target rectangle.
    AspectFill, // !< The content is proportionally resized to completely fill the target rectangle.
    Stretch, // !< The content is stretched to match the entire target rectangle.
    Center, // !< The content is centered in the target rectangle, but it is NOT resized.
  }

  // Canvas Drawings
  // Tab

  private static class CacheForAvailableIcon {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
    private static RectF resizedFrame = new RectF();
    private static RectF availableRect = new RectF();
    private static Path availablePath = new Path();
  }

  public static void drawAvailableIcon(Canvas canvas, int color) {
    WireStyleKit.drawAvailableIcon(
        canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
  }

  public static void drawAvailableIcon(
      Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
    // General Declarations
    Paint paint = CacheForAvailableIcon.paint;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForAvailableIcon.resizedFrame;
    WireStyleKit.resizingBehaviorApply(
        resizing, CacheForAvailableIcon.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

    // Available
    RectF availableRect = CacheForAvailableIcon.availableRect;
    availableRect.set(0f, 0f, 64f, 64f);
    Path availablePath = CacheForAvailableIcon.availablePath;
    availablePath.reset();
    availablePath.moveTo(32f, 64f);
    availablePath.cubicTo(49.67f, 64f, 64f, 49.67f, 64f, 32f);
    availablePath.cubicTo(64f, 14.33f, 49.67f, 0f, 32f, 0f);
    availablePath.cubicTo(14.33f, 0f, 0f, 14.33f, 0f, 32f);
    availablePath.cubicTo(0f, 49.67f, 14.33f, 64f, 32f, 64f);
    availablePath.close();

    paint.reset();
    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
    availablePath.setFillType(Path.FillType.EVEN_ODD);
    paint.setStyle(Paint.Style.FILL);
    paint.setColor(color);
    canvas.drawPath(availablePath, paint);

    canvas.restore();
  }

  private static class CacheForAwayIcon {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
    private static RectF resizedFrame = new RectF();
    private static RectF awayRect = new RectF();
    private static Path awayPath = new Path();
  }

  public static void drawAwayIcon(Canvas canvas, int color) {
    WireStyleKit.drawAwayIcon(
        canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
  }

  public static void drawAwayIcon(
      Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
    // General Declarations
    Paint paint = CacheForAwayIcon.paint;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForAwayIcon.resizedFrame;
    WireStyleKit.resizingBehaviorApply(
        resizing, CacheForAwayIcon.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

    // Away
    RectF awayRect = CacheForAwayIcon.awayRect;
    awayRect.set(0f, 0f, 64f, 64f);
    Path awayPath = CacheForAwayIcon.awayPath;
    awayPath.reset();
    awayPath.moveTo(32f, 64f);
    awayPath.cubicTo(14.33f, 64f, 0f, 49.67f, 0f, 32f);
    awayPath.cubicTo(0f, 14.33f, 14.33f, 0f, 32f, 0f);
    awayPath.cubicTo(49.67f, 0f, 64f, 14.33f, 64f, 32f);
    awayPath.cubicTo(64f, 49.67f, 49.67f, 64f, 32f, 64f);
    awayPath.close();
    awayPath.moveTo(32f, 51.2f);
    awayPath.cubicTo(42.6f, 51.2f, 51.2f, 42.6f, 51.2f, 32f);
    awayPath.cubicTo(51.2f, 21.4f, 42.6f, 12.8f, 32f, 12.8f);
    awayPath.cubicTo(21.4f, 12.8f, 12.8f, 21.4f, 12.8f, 32f);
    awayPath.cubicTo(12.8f, 42.6f, 21.4f, 51.2f, 32f, 51.2f);
    awayPath.close();

    paint.reset();
    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
    awayPath.setFillType(Path.FillType.EVEN_ODD);
    paint.setStyle(Paint.Style.FILL);
    paint.setColor(color);
    canvas.drawPath(awayPath, paint);

    canvas.restore();
  }

  private static class CacheForBusyIcon {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
    private static RectF resizedFrame = new RectF();
    private static RectF busyRect = new RectF();
    private static Path busyPath = new Path();
  }

  public static void drawBusyIcon(Canvas canvas, int color) {
    WireStyleKit.drawBusyIcon(
        canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
  }

  public static void drawBusyIcon(
      Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
    // General Declarations
    Paint paint = CacheForBusyIcon.paint;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForBusyIcon.resizedFrame;
    WireStyleKit.resizingBehaviorApply(
        resizing, CacheForBusyIcon.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

    // Busy
    RectF busyRect = CacheForBusyIcon.busyRect;
    busyRect.set(0f, 0f, 64f, 64f);
    Path busyPath = CacheForBusyIcon.busyPath;
    busyPath.reset();
    busyPath.moveTo(32f, 64f);
    busyPath.cubicTo(14.33f, 64f, 0f, 49.67f, 0f, 32f);
    busyPath.cubicTo(0f, 14.33f, 14.33f, 0f, 32f, 0f);
    busyPath.cubicTo(49.67f, 0f, 64f, 14.33f, 64f, 32f);
    busyPath.cubicTo(64f, 49.67f, 49.67f, 64f, 32f, 64f);
    busyPath.close();
    busyPath.moveTo(12.8f, 25.6f);
    busyPath.lineTo(12.8f, 38.4f);
    busyPath.lineTo(51.2f, 38.4f);
    busyPath.lineTo(51.2f, 25.6f);
    busyPath.lineTo(12.8f, 25.6f);
    busyPath.close();

    paint.reset();
    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
    busyPath.setFillType(Path.FillType.EVEN_ODD);
    paint.setStyle(Paint.Style.FILL);
    paint.setColor(color);
    canvas.drawPath(busyPath, paint);

    canvas.restore();
  }

  private static class CacheForDownArrow {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
    private static RectF resizedFrame = new RectF();
    private static RectF downArrowRect = new RectF();
    private static Path downArrowPath = new Path();
  }

  public static void drawDownArrow(Canvas canvas, int color) {
    WireStyleKit.drawDownArrow(
        canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
  }

  public static void drawDownArrow(
      Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
    // General Declarations
    Paint paint = CacheForDownArrow.paint;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForDownArrow.resizedFrame;
    WireStyleKit.resizingBehaviorApply(
        resizing, CacheForDownArrow.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

    // DownArrow
    RectF downArrowRect = CacheForDownArrow.downArrowRect;
    downArrowRect.set(23f, 0f, 42f, 63f);
    Path downArrowPath = CacheForDownArrow.downArrowPath;
    downArrowPath.reset();
    downArrowPath.moveTo(40.25f, 52.03f);
    downArrowPath.lineTo(42f, 53.74f);
    downArrowPath.lineTo(32.5f, 63f);
    downArrowPath.lineTo(23f, 53.74f);
    downArrowPath.lineTo(24.75f, 52.03f);
    downArrowPath.lineTo(31.26f, 58.36f);
    downArrowPath.lineTo(31.26f, 0f);
    downArrowPath.lineTo(33.74f, 0f);
    downArrowPath.lineTo(33.74f, 58.37f);
    downArrowPath.lineTo(40.25f, 52.03f);
    downArrowPath.close();

    paint.reset();
    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
    downArrowPath.setFillType(Path.FillType.EVEN_ODD);
    paint.setStyle(Paint.Style.FILL);
    paint.setColor(color);
    canvas.drawPath(downArrowPath, paint);

    canvas.restore();
  }

  private static class CacheForServiceIcon {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
    private static RectF resizedFrame = new RectF();
    private static RectF serviceRect = new RectF();
    private static Path servicePath = new Path();
  }

  public static void drawServiceIcon(Canvas canvas, int color) {
    WireStyleKit.drawServiceIcon(
        canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
  }

  public static void drawServiceIcon(
      Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
    // General Declarations
    Paint paint = CacheForServiceIcon.paint;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForServiceIcon.resizedFrame;
    WireStyleKit.resizingBehaviorApply(
        resizing, CacheForServiceIcon.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

    // Service
    RectF serviceRect = CacheForServiceIcon.serviceRect;
    serviceRect.set(0f, 6f, 64f, 57f);
    Path servicePath = CacheForServiceIcon.servicePath;
    servicePath.reset();
    servicePath.moveTo(20.44f, 23.59f);
    servicePath.cubicTo(13.08f, 23.59f, 7.11f, 29.49f, 7.11f, 36.78f);
    servicePath.lineTo(7.11f, 48.21f);
    servicePath.cubicTo(7.11f, 49.18f, 7.91f, 49.97f, 8.89f, 49.97f);
    servicePath.lineTo(55.11f, 49.97f);
    servicePath.cubicTo(56.09f, 49.97f, 56.89f, 49.18f, 56.89f, 48.21f);
    servicePath.lineTo(56.89f, 36.78f);
    servicePath.cubicTo(56.89f, 29.49f, 50.92f, 23.59f, 43.55f, 23.59f);
    servicePath.lineTo(20.44f, 23.59f);
    servicePath.close();
    servicePath.moveTo(57.67f, 22.14f);
    servicePath.cubicTo(61.57f, 25.83f, 64f, 31.02f, 64f, 36.78f);
    servicePath.lineTo(64f, 48.21f);
    servicePath.cubicTo(64f, 53.06f, 60.02f, 57f, 55.11f, 57f);
    servicePath.lineTo(8.89f, 57f);
    servicePath.cubicTo(3.98f, 57f, 0f, 53.06f, 0f, 48.21f);
    servicePath.lineTo(0f, 36.78f);
    servicePath.cubicTo(0f, 31.02f, 2.43f, 25.83f, 6.33f, 22.14f);
    servicePath.lineTo(0.42f, 11.17f);
    servicePath.cubicTo(-0.51f, 9.46f, 0.15f, 7.33f, 1.88f, 6.41f);
    servicePath.cubicTo(3.62f, 5.5f, 5.77f, 6.15f, 6.69f, 7.86f);
    servicePath.lineTo(12.28f, 18.23f);
    servicePath.cubicTo(14.78f, 17.15f, 17.54f, 16.55f, 20.44f, 16.55f);
    servicePath.lineTo(43.55f, 16.55f);
    servicePath.cubicTo(46.46f, 16.55f, 49.22f, 17.15f, 51.72f, 18.23f);
    servicePath.lineTo(57.31f, 7.86f);
    servicePath.cubicTo(58.23f, 6.15f, 60.38f, 5.5f, 62.12f, 6.41f);
    servicePath.cubicTo(63.85f, 7.33f, 64.51f, 9.46f, 63.58f, 11.17f);
    servicePath.lineTo(57.67f, 22.14f);
    servicePath.close();
    servicePath.moveTo(21.33f, 37.66f);
    servicePath.cubicTo(21.33f, 39.6f, 19.74f, 41.17f, 17.78f, 41.17f);
    servicePath.cubicTo(15.81f, 41.17f, 14.22f, 39.6f, 14.22f, 37.66f);
    servicePath.cubicTo(14.22f, 35.71f, 15.81f, 34.14f, 17.78f, 34.14f);
    servicePath.cubicTo(19.74f, 34.14f, 21.33f, 35.71f, 21.33f, 37.66f);
    servicePath.close();
    servicePath.moveTo(35.55f, 37.66f);
    servicePath.cubicTo(35.55f, 39.6f, 33.96f, 41.17f, 32f, 41.17f);
    servicePath.cubicTo(30.04f, 41.17f, 28.44f, 39.6f, 28.44f, 37.66f);
    servicePath.cubicTo(28.44f, 35.71f, 30.04f, 34.14f, 32f, 34.14f);
    servicePath.cubicTo(33.96f, 34.14f, 35.55f, 35.71f, 35.55f, 37.66f);
    servicePath.close();
    servicePath.moveTo(46.22f, 41.17f);
    servicePath.cubicTo(44.26f, 41.17f, 42.67f, 39.6f, 42.67f, 37.66f);
    servicePath.cubicTo(42.67f, 35.71f, 44.26f, 34.14f, 46.22f, 34.14f);
    servicePath.cubicTo(48.18f, 34.14f, 49.78f, 35.71f, 49.78f, 37.66f);
    servicePath.cubicTo(49.78f, 39.6f, 48.18f, 41.17f, 46.22f, 41.17f);
    servicePath.close();

    paint.reset();
    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
    paint.setStyle(Paint.Style.FILL);
    paint.setColor(color);
    canvas.drawPath(servicePath, paint);

    canvas.restore();
  }

  private static class CacheForGroupIcon {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
    private static RectF resizedFrame = new RectF();
    private static RectF groupRect = new RectF();
    private static Path groupPath = new Path();
  }

  public static void drawGroupIcon(Canvas canvas, int color) {
    WireStyleKit.drawGroupIcon(
        canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
  }

  public static void drawGroupIcon(
      Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
    // General Declarations
    Paint paint = CacheForGroupIcon.paint;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForGroupIcon.resizedFrame;
    WireStyleKit.resizingBehaviorApply(
        resizing, CacheForGroupIcon.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

    // Group
    RectF groupRect = CacheForGroupIcon.groupRect;
    groupRect.set(0f, 0f, 64f, 64f);
    Path groupPath = CacheForGroupIcon.groupPath;
    groupPath.reset();
    groupPath.moveTo(40f, 8f);
    groupPath.cubicTo(40f, 12.42f, 36.42f, 16f, 32f, 16f);
    groupPath.cubicTo(27.58f, 16f, 24f, 12.42f, 24f, 8f);
    groupPath.cubicTo(24f, 3.58f, 27.58f, 0f, 32f, 0f);
    groupPath.cubicTo(36.42f, 0f, 40f, 3.58f, 40f, 8f);
    groupPath.close();
    groupPath.moveTo(64f, 20f);
    groupPath.cubicTo(64f, 24.42f, 60.42f, 28f, 56f, 28f);
    groupPath.cubicTo(51.58f, 28f, 48f, 24.42f, 48f, 20f);
    groupPath.cubicTo(48f, 15.58f, 51.58f, 12f, 56f, 12f);
    groupPath.cubicTo(60.42f, 12f, 64f, 15.58f, 64f, 20f);
    groupPath.close();
    groupPath.moveTo(64f, 44f);
    groupPath.cubicTo(64f, 48.42f, 60.42f, 52f, 56f, 52f);
    groupPath.cubicTo(51.58f, 52f, 48f, 48.42f, 48f, 44f);
    groupPath.cubicTo(48f, 39.58f, 51.58f, 36f, 56f, 36f);
    groupPath.cubicTo(60.42f, 36f, 64f, 39.58f, 64f, 44f);
    groupPath.close();
    groupPath.moveTo(40f, 56f);
    groupPath.cubicTo(40f, 60.42f, 36.42f, 64f, 32f, 64f);
    groupPath.cubicTo(27.58f, 64f, 24f, 60.42f, 24f, 56f);
    groupPath.cubicTo(24f, 51.58f, 27.58f, 48f, 32f, 48f);
    groupPath.cubicTo(36.42f, 48f, 40f, 51.58f, 40f, 56f);
    groupPath.close();
    groupPath.moveTo(16f, 44f);
    groupPath.cubicTo(16f, 48.42f, 12.42f, 52f, 8f, 52f);
    groupPath.cubicTo(3.58f, 52f, 0f, 48.42f, 0f, 44f);
    groupPath.cubicTo(0f, 39.58f, 3.58f, 36f, 8f, 36f);
    groupPath.cubicTo(12.42f, 36f, 16f, 39.58f, 16f, 44f);
    groupPath.close();
    groupPath.moveTo(16f, 20f);
    groupPath.cubicTo(16f, 24.42f, 12.42f, 28f, 8f, 28f);
    groupPath.cubicTo(3.58f, 28f, 0f, 24.42f, 0f, 20f);
    groupPath.cubicTo(0f, 15.58f, 3.58f, 12f, 8f, 12f);
    groupPath.cubicTo(12.42f, 12f, 16f, 15.58f, 16f, 20f);
    groupPath.close();

    paint.reset();
    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
    paint.setStyle(Paint.Style.FILL);
    paint.setColor(color);
    canvas.drawPath(groupPath, paint);

    canvas.restore();
  }

  private static class CacheForNavigationArrow {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
    private static RectF resizedFrame = new RectF();
    private static RectF arrowRect = new RectF();
    private static Path arrowPath = new Path();
  }

  public static void drawNavigationArrow(Canvas canvas, int color) {
    WireStyleKit.drawNavigationArrow(
        canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
  }

  public static void drawNavigationArrow(
      Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
    // General Declarations
    Paint paint = CacheForNavigationArrow.paint;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForNavigationArrow.resizedFrame;
    WireStyleKit.resizingBehaviorApply(
        resizing, CacheForNavigationArrow.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

    // Arrow
    RectF arrowRect = CacheForNavigationArrow.arrowRect;
    arrowRect.set(12.5f, 0f, 51.5f, 64f);
    Path arrowPath = CacheForNavigationArrow.arrowPath;
    arrowPath.reset();
    arrowPath.moveTo(12.5f, 7.38f);
    arrowPath.lineTo(19.81f, 0f);
    arrowPath.lineTo(51.5f, 32f);
    arrowPath.lineTo(19.81f, 64f);
    arrowPath.lineTo(12.5f, 56.62f);
    arrowPath.lineTo(36.88f, 32f);
    arrowPath.lineTo(12.5f, 7.38f);
    arrowPath.close();

    paint.reset();
    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
    arrowPath.setFillType(Path.FillType.EVEN_ODD);
    paint.setStyle(Paint.Style.FILL);
    paint.setColor(color);
    canvas.drawPath(arrowPath, paint);

    canvas.restore();
  }

  private static class CacheForGuestIcon {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
    private static RectF resizedFrame = new RectF();
    private static RectF guestRect = new RectF();
    private static Path guestPath = new Path();
  }

  public static void drawGuestIcon(Canvas canvas, int color) {
    WireStyleKit.drawGuestIcon(
        canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
  }

  public static void drawGuestIcon(
      Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
    // General Declarations
    Paint paint = CacheForGuestIcon.paint;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForGuestIcon.resizedFrame;
    WireStyleKit.resizingBehaviorApply(
        resizing, CacheForGuestIcon.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

    // Guest
    RectF guestRect = CacheForGuestIcon.guestRect;
    guestRect.set(4f, 0f, 60f, 64f);
    Path guestPath = CacheForGuestIcon.guestPath;
    guestPath.reset();
    guestPath.moveTo(24f, 4f);
    guestPath.cubicTo(24f, 1.79f, 25.79f, 0f, 28f, 0f);
    guestPath.lineTo(36f, 0f);
    guestPath.cubicTo(38.21f, 0f, 40f, 1.79f, 40f, 4f);
    guestPath.lineTo(52f, 4f);
    guestPath.cubicTo(56.42f, 4f, 60f, 7.58f, 60f, 12f);
    guestPath.lineTo(60f, 56f);
    guestPath.cubicTo(60f, 60.42f, 56.42f, 64f, 52f, 64f);
    guestPath.lineTo(12f, 64f);
    guestPath.cubicTo(7.58f, 64f, 4f, 60.42f, 4f, 56f);
    guestPath.lineTo(4f, 12f);
    guestPath.cubicTo(4f, 7.58f, 7.58f, 4f, 12f, 4f);
    guestPath.lineTo(24f, 4f);
    guestPath.close();
    guestPath.moveTo(26f, 8f);
    guestPath.cubicTo(24.9f, 8f, 24f, 8.9f, 24f, 10f);
    guestPath.cubicTo(24f, 11.1f, 24.9f, 12f, 26f, 12f);
    guestPath.lineTo(38f, 12f);
    guestPath.cubicTo(39.1f, 12f, 40f, 11.1f, 40f, 10f);
    guestPath.cubicTo(40f, 8.9f, 39.1f, 8f, 38f, 8f);
    guestPath.lineTo(26f, 8f);
    guestPath.close();
    guestPath.moveTo(32f, 36f);
    guestPath.cubicTo(36.42f, 36f, 40f, 32.42f, 40f, 28f);
    guestPath.cubicTo(40f, 23.58f, 36.42f, 20f, 32f, 20f);
    guestPath.cubicTo(27.58f, 20f, 24f, 23.58f, 24f, 28f);
    guestPath.cubicTo(24f, 32.42f, 27.58f, 36f, 32f, 36f);
    guestPath.close();
    guestPath.moveTo(24f, 40f);
    guestPath.cubicTo(19.58f, 40f, 16f, 43.58f, 16f, 48f);
    guestPath.lineTo(16f, 52f);
    guestPath.lineTo(48f, 52f);
    guestPath.lineTo(48f, 48f);
    guestPath.cubicTo(48f, 43.58f, 44.42f, 40f, 40f, 40f);
    guestPath.lineTo(24f, 40f);
    guestPath.close();

    paint.reset();
    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
    paint.setStyle(Paint.Style.FILL);
    paint.setColor(color);
    canvas.drawPath(guestPath, paint);

    canvas.restore();
  }

  // Canvas Images
  // Tab

  public static Bitmap imageOfAvailableIcon(int color) {
    Bitmap imageOfAvailableIcon = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(imageOfAvailableIcon);
    WireStyleKit.drawAvailableIcon(canvas, color);

    return imageOfAvailableIcon;
  }

  public static Bitmap imageOfAwayIcon(int color) {
    Bitmap imageOfAwayIcon = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(imageOfAwayIcon);
    WireStyleKit.drawAwayIcon(canvas, color);

    return imageOfAwayIcon;
  }

  public static Bitmap imageOfBusyIcon(int color) {
    Bitmap imageOfBusyIcon = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(imageOfBusyIcon);
    WireStyleKit.drawBusyIcon(canvas, color);

    return imageOfBusyIcon;
  }

  public static Bitmap imageOfDownArrow(int color) {
    Bitmap imageOfDownArrow = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(imageOfDownArrow);
    WireStyleKit.drawDownArrow(canvas, color);

    return imageOfDownArrow;
  }

  public static Bitmap imageOfServiceIcon(int color) {
    Bitmap imageOfServiceIcon = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(imageOfServiceIcon);
    WireStyleKit.drawServiceIcon(canvas, color);

    return imageOfServiceIcon;
  }

  public static Bitmap imageOfGroupIcon(int color) {
    Bitmap imageOfGroupIcon = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(imageOfGroupIcon);
    WireStyleKit.drawGroupIcon(canvas, color);

    return imageOfGroupIcon;
  }

  public static Bitmap imageOfNavigationArrow(int color) {
    Bitmap imageOfNavigationArrow = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(imageOfNavigationArrow);
    WireStyleKit.drawNavigationArrow(canvas, color);

    return imageOfNavigationArrow;
  }

  public static Bitmap imageOfGuestIcon(int color) {
    Bitmap imageOfGuestIcon = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(imageOfGuestIcon);
    WireStyleKit.drawGuestIcon(canvas, color);

    return imageOfGuestIcon;
  }

  // Resizing Behavior
  public static void resizingBehaviorApply(
      ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
    if (rect.equals(target) || target == null) {
      result.set(rect);
      return;
    }

    if (behavior == ResizingBehavior.Stretch) {
      result.set(target);
      return;
    }

    float xRatio = Math.abs(target.width() / rect.width());
    float yRatio = Math.abs(target.height() / rect.height());
    float scale = 0f;

    switch (behavior) {
      case AspectFit:
        {
          scale = Math.min(xRatio, yRatio);
          break;
        }
      case AspectFill:
        {
          scale = Math.max(xRatio, yRatio);
          break;
        }
      case Center:
        {
          scale = 1f;
          break;
        }
    }

    float newWidth = Math.abs(rect.width() * scale);
    float newHeight = Math.abs(rect.height() * scale);
    result.set(
        target.centerX() - newWidth / 2,
        target.centerY() - newHeight / 2,
        target.centerX() + newWidth / 2,
        target.centerY() + newHeight / 2);
  }
}
